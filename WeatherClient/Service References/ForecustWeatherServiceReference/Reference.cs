//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherClient.ForecustWeatherServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeatherForecust", Namespace="http://schemas.datacontract.org/2004/07/WeatherService")]
    [System.SerializableAttribute()]
    public partial class WeatherForecust : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherClient.ForecustWeatherServiceReference.ForeCast CurrentWeatherField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherClient.ForecustWeatherServiceReference.ForeCast[] ForecastField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherClient.ForecustWeatherServiceReference.ForeCast CurrentWeather {
            get {
                return this.CurrentWeatherField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentWeatherField, value) != true)) {
                    this.CurrentWeatherField = value;
                    this.RaisePropertyChanged("CurrentWeather");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherClient.ForecustWeatherServiceReference.ForeCast[] Forecast {
            get {
                return this.ForecastField;
            }
            set {
                if ((object.ReferenceEquals(this.ForecastField, value) != true)) {
                    this.ForecastField = value;
                    this.RaisePropertyChanged("Forecast");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ForeCast", Namespace="http://schemas.datacontract.org/2004/07/WeatherService")]
    [System.SerializableAttribute()]
    public partial class ForeCast : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CloudsValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherClient.ForecustWeatherServiceReference.Data DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float HumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherClient.ForecustWeatherServiceReference.Precipitation PrecipitationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PressureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float WindSpeedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CloudsValue {
            get {
                return this.CloudsValueField;
            }
            set {
                if ((object.ReferenceEquals(this.CloudsValueField, value) != true)) {
                    this.CloudsValueField = value;
                    this.RaisePropertyChanged("CloudsValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherClient.ForecustWeatherServiceReference.Data Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Humidity {
            get {
                return this.HumidityField;
            }
            set {
                if ((this.HumidityField.Equals(value) != true)) {
                    this.HumidityField = value;
                    this.RaisePropertyChanged("Humidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherClient.ForecustWeatherServiceReference.Precipitation Precipitation {
            get {
                return this.PrecipitationField;
            }
            set {
                if ((object.ReferenceEquals(this.PrecipitationField, value) != true)) {
                    this.PrecipitationField = value;
                    this.RaisePropertyChanged("Precipitation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Pressure {
            get {
                return this.PressureField;
            }
            set {
                if ((this.PressureField.Equals(value) != true)) {
                    this.PressureField = value;
                    this.RaisePropertyChanged("Pressure");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float WindSpeed {
            get {
                return this.WindSpeedField;
            }
            set {
                if ((this.WindSpeedField.Equals(value) != true)) {
                    this.WindSpeedField = value;
                    this.RaisePropertyChanged("WindSpeed");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Data", Namespace="http://schemas.datacontract.org/2004/07/WeatherService")]
    [System.SerializableAttribute()]
    public partial class Data : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ToField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime From {
            get {
                return this.FromField;
            }
            set {
                if ((this.FromField.Equals(value) != true)) {
                    this.FromField = value;
                    this.RaisePropertyChanged("From");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime To {
            get {
                return this.ToField;
            }
            set {
                if ((this.ToField.Equals(value) != true)) {
                    this.ToField = value;
                    this.RaisePropertyChanged("To");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Precipitation", Namespace="http://schemas.datacontract.org/2004/07/WeatherService")]
    [System.SerializableAttribute()]
    public partial class Precipitation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ForcustItem", Namespace="http://schemas.datacontract.org/2004/07/WeatherService")]
    [System.SerializableAttribute()]
    public partial class ForcustItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WeatherClient.ForecustWeatherServiceReference.ForeCast[] ForecastField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WeatherClient.ForecustWeatherServiceReference.ForeCast[] Forecast {
            get {
                return this.ForecastField;
            }
            set {
                if ((object.ReferenceEquals(this.ForecastField, value) != true)) {
                    this.ForecastField = value;
                    this.RaisePropertyChanged("Forecast");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ForecustWeatherServiceReference.IWeatherService")]
    public interface IWeatherService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWeather", ReplyAction="http://tempuri.org/IWeatherService/GetWeatherResponse")]
        WeatherClient.ForecustWeatherServiceReference.WeatherForecust GetWeather(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetWeather", ReplyAction="http://tempuri.org/IWeatherService/GetWeatherResponse")]
        System.Threading.Tasks.Task<WeatherClient.ForecustWeatherServiceReference.WeatherForecust> GetWeatherAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetCurrentWeather", ReplyAction="http://tempuri.org/IWeatherService/GetCurrentWeatherResponse")]
        WeatherClient.ForecustWeatherServiceReference.ForcustItem GetCurrentWeather(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetCurrentWeather", ReplyAction="http://tempuri.org/IWeatherService/GetCurrentWeatherResponse")]
        System.Threading.Tasks.Task<WeatherClient.ForecustWeatherServiceReference.ForcustItem> GetCurrentWeatherAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetForeCustWeather", ReplyAction="http://tempuri.org/IWeatherService/GetForeCustWeatherResponse")]
        WeatherClient.ForecustWeatherServiceReference.ForcustItem GetForeCustWeather(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherService/GetForeCustWeather", ReplyAction="http://tempuri.org/IWeatherService/GetForeCustWeatherResponse")]
        System.Threading.Tasks.Task<WeatherClient.ForecustWeatherServiceReference.ForcustItem> GetForeCustWeatherAsync(string city);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherServiceChannel : WeatherClient.ForecustWeatherServiceReference.IWeatherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherServiceClient : System.ServiceModel.ClientBase<WeatherClient.ForecustWeatherServiceReference.IWeatherService>, WeatherClient.ForecustWeatherServiceReference.IWeatherService {
        
        public WeatherServiceClient() {
        }
        
        public WeatherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WeatherClient.ForecustWeatherServiceReference.WeatherForecust GetWeather(string city) {
            return base.Channel.GetWeather(city);
        }
        
        public System.Threading.Tasks.Task<WeatherClient.ForecustWeatherServiceReference.WeatherForecust> GetWeatherAsync(string city) {
            return base.Channel.GetWeatherAsync(city);
        }
        
        public WeatherClient.ForecustWeatherServiceReference.ForcustItem GetCurrentWeather(string city) {
            return base.Channel.GetCurrentWeather(city);
        }
        
        public System.Threading.Tasks.Task<WeatherClient.ForecustWeatherServiceReference.ForcustItem> GetCurrentWeatherAsync(string city) {
            return base.Channel.GetCurrentWeatherAsync(city);
        }
        
        public WeatherClient.ForecustWeatherServiceReference.ForcustItem GetForeCustWeather(string city) {
            return base.Channel.GetForeCustWeather(city);
        }
        
        public System.Threading.Tasks.Task<WeatherClient.ForecustWeatherServiceReference.ForcustItem> GetForeCustWeatherAsync(string city) {
            return base.Channel.GetForeCustWeatherAsync(city);
        }
    }
}
